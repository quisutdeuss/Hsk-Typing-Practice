# 编码规则文档

> **备忘：** 本文档记录编码规则，包括编码基础规则、代码修改规则、Markdown 文档规范等。主要用于指导开发人员在编码时遵循一致的风格和流程。

## 目录

- [编码规则文档](#编码规则文档)
  - [目录](#目录)
  - [编码基础规则](#编码基础规则)
    - [基本原则](#基本原则)
    - [失败方案记录](#失败方案记录)
  - [代码修改规则](#代码修改规则)
    - [修改前必查](#修改前必查)
    - [修改时原则](#修改时原则)
    - [修改后检查](#修改后检查)
    - [代码审查清单](#代码审查清单)
  - [问题处理规范](#问题处理规范)
    - [问题记录模板](#问题记录模板)
    - [解决方案管理](#解决方案管理)
    - [问题追踪表](#问题追踪表)
  - [Markdown文档规范](#markdown文档规范)
    - [基本规则](#基本规则)
    - [版本记录规范](#版本记录规范)

## 编码基础规则

### 基本原则

1. 代码可读性优先
2. 保持一致的代码风格
3. 及时更新文档
4. **征求同意原则**：在进行任何代码改动之前，必须征求用户的同意。只有在用户明确回复"同意"、"继续"或数字"1"时，才能进行改动。
5. **功能实现流程**：
   - 先讨论并确认功能实现的整体步骤
   - 将确认后的步骤记录到相应的 MD 文档中
   - 进行具体的代码编写，先展示代码，再确认后进行代码编写
   - 每个细节的更改都需确认后再实施
6. **多语言支持原则**：
   - 所有用户可见的文本必须支持多语言切换
   - 新增功能时必须同时添加所有支持语言的翻译
   - 翻译文本统一在 translations.js 中管理
   - 提交代码前确认所有语言版本的文本显示正确

### 失败方案记录

每个失败的方案必须记录：

```markdown
方案：xxx
失败原因：xxx
错误信息：xxx
环境信息：xxx
```

## 代码修改规则

### 修改前必查

1. 查看相关文档
2. 查看失败方案记录
3. 理解现有代码逻辑
4. 评估修改的影响范围
5. 制定回滚计划

### 修改时原则

1. 一次只改一个问题
2. 先写注释再写代码
3. 保持代码风格一致
4. 添加必要的注释
5. 避免重复代码
6. 先展示要修改的代码，说清楚要做什么，告诉我需要修改代码的地方，由我自己进行代码修改。

### 修改后检查

1. 进行功能测试
2. 更新相关文档
3. 记录修改内容
4. 确认多语言支持正常

### 代码审查清单

- [ ] 是否已查阅相关文档
- [ ] 是否考虑了所有可能的影响
- [ ] 是否制定了回滚计划
- [ ] 是否遵循代码规范
- [ ] 是否添加了必要注释
- [ ] 是否完成了功能测试
- [ ] 是否更新了相关文档

## 问题处理规范

### 问题记录模板

```markdown
问题标题：
发现时间：
影响范围：

问题描述：
1. 现象：
2. 复现步骤：
3. 环境信息：

解决过程：
1. 尝试方案：
2. 实施步骤：
3. 结果：
4. 原因：

最终解决方案：
1. 采用方案：
2. 解决步骤：
3. 验证方法：
4. 预防措施：
```

### 解决方案管理

1. 建立解决方案库
2. 记录每个问题的解决过程
3. 定期复查和优化解决方案
4. 避免重复尝试已证实无效的方案

### 问题追踪表

```markdown
| 问题ID | 问题描述 | 已尝试方案 | 失败原因 | 最终解决方案 | 状态 |
|--------|----------|------------|----------|--------------|------|
| P001   | 示例问题 | 方案A<br>方案B | A：xxx<br>B：xxx | 方案C | 已解决 |
```

## Markdown文档规范

### 基本规则

1. 标题前后必须有空行
2. 列表前后必须有空行
3. 代码块前后必须有空行
4. 文件末尾必须有空行
5. 链接必须有效

### 版本记录规范

每次功能完成后必须记录：

```markdown
版本 Hash：xxx
完成功能：xxx
修改文件：
1. file1: 改动说明
2. file2: 改动说明
3. 更新时间：
```
